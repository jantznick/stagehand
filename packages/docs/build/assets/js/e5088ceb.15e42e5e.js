"use strict";(self.webpackChunk_stagehand_docs=self.webpackChunk_stagehand_docs||[]).push([[303],{1184:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>o});var i=n(6540);const r={},d=i.createContext(r);function l(e){const s=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(d.Provider,{value:s},e.children)}},7451:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>l,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"api/auth","title":"API Reference: Authentication","description":"This document provides a detailed breakdown of the authentication-related API endpoints.","source":"@site/docs/api/auth.md","sourceDirName":"api","slug":"/api/auth","permalink":"/api/auth","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/stagehand/tree/main/packages/docs/docs/api/auth.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Frontend Architecture & Conventions","permalink":"/frontend-architecture"},"next":{"title":"API Reference: OIDC Configuration","permalink":"/api/oidc"}}');var r=n(4848),d=n(1184);const l={},o="API Reference: Authentication",c={},t=[{value:"Overview",id:"overview",level:2},{value:"Helper Functions",id:"helper-functions",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"<code>POST /register</code>",id:"post-register",level:3},{value:"<code>POST /login</code>",id:"post-login",level:3},{value:"<code>POST /login/magic</code>",id:"post-loginmagic",level:3},{value:"<code>POST /login/verify</code>",id:"post-loginverify",level:3},{value:"<code>POST /verify-email</code>",id:"post-verify-email",level:3},{value:"<code>POST /forgot-password</code>",id:"post-forgot-password",level:3},{value:"<code>POST /reset-password</code>",id:"post-reset-password",level:3},{value:"<code>POST /logout</code>",id:"post-logout",level:3},{value:"<code>GET /session</code>",id:"get-session",level:3},{value:"OIDC Routes",id:"oidc-routes",level:3}];function h(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"api-reference-authentication",children:"API Reference: Authentication"})}),"\n",(0,r.jsx)(s.p,{children:"This document provides a detailed breakdown of the authentication-related API endpoints."}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"File:"})," ",(0,r.jsx)(s.code,{children:"packages/api/src/routes/auth.js"}),"\n",(0,r.jsx)(s.strong,{children:"Base Path:"})," ",(0,r.jsx)(s.code,{children:"/api/v1/auth"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(s.p,{children:'Handles all user authentication, registration, session management, and password recovery. It supports both traditional password-based login and passwordless "magic link" authentication. It also contains the handlers for OIDC-based single sign-on.'}),"\n",(0,r.jsx)(s.h2,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,r.jsx)(s.p,{children:"Internal functions used by the routes in this file."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"generateVerificationToken()"}),": Creates a 6-digit numeric token that is valid for 15 minutes. This is used for verifying a user's email address upon registration."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sanitizeUser(user)"}),": Removes sensitive fields (",(0,r.jsx)(s.code,{children:"password"}),", ",(0,r.jsx)(s.code,{children:"verificationToken"}),", etc.) from the user object before sending it back in a response. This ensures no secret data is accidentally exposed to the client."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sendMagicLink(user)"}),": Generates a secure, single-use login token, saves its SHA256 hash to the ",(0,r.jsx)(s.code,{children:"LoginToken"})," table in the database, and emails a magic login link to the user."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,r.jsx)(s.h3,{id:"post-register",children:(0,r.jsx)(s.code,{children:"POST /register"})}),"\n",(0,r.jsx)(s.p,{children:"Registers a new user. This endpoint supports two primary modes: standard registration with a password, and passwordless registration using a magic link."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"email"})," (string, required): The user's email address."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"password"})," (string): The user's password (min. 8 characters). Required if ",(0,r.jsx)(s.code,{children:"useMagicLink"})," is ",(0,r.jsx)(s.code,{children:"false"})," or omitted."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"useMagicLink"})," (boolean): If ",(0,r.jsx)(s.code,{children:"true"}),", the user is created without a password, and a magic login link is emailed to them instead of a verification code."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"201"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["If ",(0,r.jsx)(s.code,{children:"useMagicLink"})," is true: ",(0,r.jsx)(s.code,{children:'{ "message": "A magic link has been sent to your email." }'})]}),"\n",(0,r.jsx)(s.li,{children:"Otherwise: The sanitized user object."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Checks if a user with the given email already exists (returns ",(0,r.jsx)(s.code,{children:"409 Conflict"})," if so)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Auto-Join Logic:"})," It inspects the email's domain (",(0,r.jsx)(s.code,{children:"@example.com"}),") and checks it against the ",(0,r.jsx)(s.code,{children:"AutoJoinDomain"})," table. If a matching, verified domain is found, the new user is automatically added to the corresponding Organization or Company with a pre-configured role. Admins of that entity are notified via email."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Standard Logic:"})," If no auto-join rule exists, it creates a new ",(0,r.jsx)(s.code,{children:"Organization"})," and a default ",(0,r.jsx)(s.code,{children:"Company"})," for the user, making them the ",(0,r.jsx)(s.code,{children:"ADMIN"})," of that new organization."]}),"\n",(0,r.jsxs)(s.li,{children:["If ",(0,r.jsx)(s.code,{children:"useMagicLink"})," is true, it calls ",(0,r.jsx)(s.code,{children:"sendMagicLink()"})," and returns."]}),"\n",(0,r.jsx)(s.li,{children:"If using a password, it hashes the password, creates a verification code, and emails a welcome message. It then logs the user in immediately via Passport.js."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-login",children:(0,r.jsx)(s.code,{children:"POST /login"})}),"\n",(0,r.jsx)(s.p,{children:"Authenticates a user with their email and password."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"email"})," (string, required): The user's email."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"password"})," (string, required): The user's password."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," The sanitized user object."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Error Response (",(0,r.jsx)(s.code,{children:"401"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "error": "Invalid credentials." }'})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Finds the user by email."}),"\n",(0,r.jsxs)(s.li,{children:["Verifies the password using ",(0,r.jsx)(s.code,{children:"bcrypt.compare()"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Email Verification Check:"})," If the user's email has not been verified (",(0,r.jsx)(s.code,{children:"emailVerified"})," is false), it generates and sends a ",(0,r.jsx)(s.em,{children:"new"})," verification code. It still logs them in, but the frontend should interpret the ",(0,r.jsx)(s.code,{children:"emailVerified: false"})," flag in the response to prompt the user for the code."]}),"\n",(0,r.jsxs)(s.li,{children:["On successful login, it creates a session for the user via ",(0,r.jsx)(s.code,{children:"req.login()"})," (handled by Passport.js)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-loginmagic",children:(0,r.jsx)(s.code,{children:"POST /login/magic"})}),"\n",(0,r.jsx)(s.p,{children:"Initiates a passwordless login by sending a magic link to a user's email. This is the first step of the magic link flow."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"email"})," (string, required): The email of the user to log in."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "message": "If a user with that email exists, a magic link has been sent." }'})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Finds the user by email."}),"\n",(0,r.jsxs)(s.li,{children:["If the user exists, it calls ",(0,r.jsx)(s.code,{children:"sendMagicLink()"})," to email them a login link."]}),"\n",(0,r.jsx)(s.li,{children:"It always returns a generic success message to prevent user enumeration (i.e., maliciously checking if an email is registered with the service)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-loginverify",children:(0,r.jsx)(s.code,{children:"POST /login/verify"})}),"\n",(0,r.jsx)(s.p,{children:"Verifies a magic link token to log a user in. This is the second step of the magic link flow."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"token"})," (string, required): The single-use token from the magic link URL."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," The sanitized user object."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Error Response (",(0,r.jsx)(s.code,{children:"400"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "error": "Invalid or expired token." }'})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Hashes the provided token and looks for the hash in the ",(0,r.jsx)(s.code,{children:"LoginToken"})," table."]}),"\n",(0,r.jsx)(s.li,{children:"Ensures the token exists and has not expired."}),"\n",(0,r.jsx)(s.li,{children:"If valid, it logs the user in, deletes the used token, and returns the user object."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-verify-email",children:(0,r.jsx)(s.code,{children:"POST /verify-email"})}),"\n",(0,r.jsx)(s.p,{children:"Verifies a user's email address using the 6-digit code sent upon registration."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"userId"})," (string, required): The ID of the user to verify."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"token"})," (string, required): The 6-digit verification token."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," The sanitized user object."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Error Response (",(0,r.jsx)(s.code,{children:"400"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "error": "Invalid or expired verification code." }'})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Finds the user by ",(0,r.jsx)(s.code,{children:"userId"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["Checks that the provided token matches the ",(0,r.jsx)(s.code,{children:"verificationToken"})," on the user record and has not expired."]}),"\n",(0,r.jsxs)(s.li,{children:["If valid, it sets ",(0,r.jsx)(s.code,{children:"emailVerified"})," to ",(0,r.jsx)(s.code,{children:"true"}),", clears the token fields from the user record, and returns the updated user object."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-forgot-password",children:(0,r.jsx)(s.code,{children:"POST /forgot-password"})}),"\n",(0,r.jsx)(s.p,{children:"Initiates the password reset process."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"email"})," (string, required): The user's email address."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "message": "If a user with that email exists, a password reset link has been sent." }'})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"Finds the user by email."}),"\n",(0,r.jsx)(s.li,{children:"If the user exists, it generates a unique password reset token (a UUID), saves it and an expiry date to the user record, and emails a reset link."}),"\n",(0,r.jsx)(s.li,{children:"Always returns a generic success message to prevent user enumeration."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-reset-password",children:(0,r.jsx)(s.code,{children:"POST /reset-password"})}),"\n",(0,r.jsx)(s.p,{children:"Sets a new password for a user using a reset token."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:["Body (",(0,r.jsx)(s.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"token"})," (string, required): The password reset token from the email link."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"password"})," (string, required): The new password (min. 8 characters)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "message": "Password has been reset successfully." }'})]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Finds the user by the ",(0,r.jsx)(s.code,{children:"passwordResetToken"}),"."]}),"\n",(0,r.jsx)(s.li,{children:"Ensures the token has not expired."}),"\n",(0,r.jsx)(s.li,{children:"If valid, it hashes the new password, updates the user record, clears the reset token fields, and returns a success message."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"post-logout",children:(0,r.jsx)(s.code,{children:"POST /logout"})}),"\n",(0,r.jsx)(s.p,{children:"Logs the user out by destroying their session."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," ",(0,r.jsx)(s.code,{children:'{ "message": "Logged out successfully." }'})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Behavior:"}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Calls ",(0,r.jsx)(s.code,{children:"req.logout()"})," to clear the login session from Passport.js."]}),"\n",(0,r.jsxs)(s.li,{children:["Calls ",(0,r.jsx)(s.code,{children:"req.session.destroy()"})," to remove the session record from the database."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"get-session",children:(0,r.jsx)(s.code,{children:"GET /session"})}),"\n",(0,r.jsx)(s.p,{children:"Retrieves the current user's session information. This is a protected route used by the frontend to check if a user is currently logged in."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Middleware:"})," ",(0,r.jsx)(s.code,{children:"protect"})," (ensures user is authenticated)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsxs)(s.strong,{children:["Success Response (",(0,r.jsx)(s.code,{children:"200"}),"):"]})," The sanitized ",(0,r.jsx)(s.code,{children:"req.user"})," object, or ",(0,r.jsx)(s.code,{children:"null"})," if no user is logged in."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"oidc-routes",children:"OIDC Routes"}),"\n",(0,r.jsx)(s.p,{children:"These routes are used for Single Sign-On (SSO) integrations with external identity providers (IdPs) like Okta or Auth0."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"GET /oidc/login"}),": The entry point to initiate an OIDC login flow (SP-initiated)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"POST /oidc/login"}),": The entry point for an IdP-initiated flow where the IdP posts an assertion to Stagehand."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"GET /oidc/callback"}),": The callback (or redirect) URL that the OIDC provider sends the user to after they authenticate."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"POST /oidc/callback"}),": A callback URL for some OIDC providers that use a POST request instead of a GET."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["These routes all use the ",(0,r.jsx)(s.code,{children:"dynamicOidcStrategy"})," middleware from ",(0,r.jsx)(s.code,{children:"src/utils/passport.js"})," to dynamically configure the OIDC provider based on the user's organization. After successful authentication with the external provider, it logs the user into a Stagehand session."]})]})}function a(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);