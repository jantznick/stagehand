"use strict";(self.webpackChunk_stagehand_docs=self.webpackChunk_stagehand_docs||[]).push([[947],{1184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const r={},d=i.createContext(r);function t(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(d.Provider,{value:n},e.children)}},5085:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/relationships","title":"API Reference: Relationships","description":"This document provides a detailed breakdown of the project relationship-related API endpoints.","source":"@site/docs/api/relationships.md","sourceDirName":"api","slug":"/api/relationships","permalink":"/api/relationships","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/stagehand/tree/main/packages/docs/docs/api/relationships.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"API Reference: Hierarchy","permalink":"/api/hierarchy"},"next":{"title":"API Reference: Technologies","permalink":"/api/technologies"}}');var r=s(4848),d=s(1184);const t={},c="API Reference: Relationships",o={},l=[{value:"Overview",id:"overview",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"<code>POST /</code>",id:"post-",level:3},{value:"<code>DELETE /:id</code>",id:"delete-id",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-reference-relationships",children:"API Reference: Relationships"})}),"\n",(0,r.jsx)(n.p,{children:"This document provides a detailed breakdown of the project relationship-related API endpoints."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"})," ",(0,r.jsx)(n.code,{children:"packages/api/src/routes/relationships.js"}),"\n",(0,r.jsx)(n.strong,{children:"Base Path:"})," ",(0,r.jsx)(n.code,{children:"/api/v1/relationships"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:'Manages the relationships (dependencies) between different projects. These relationships are the "edges" in the architecture dependency graph visualization. All operations are scoped to a specific company, ensuring that dependency graphs do not cross company boundaries.'}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Middleware:"})," All routes in this file are protected by a custom middleware ",(0,r.jsx)(n.code,{children:"canEditCompanyResources"}),". This middleware ensures that:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:"companyId"})," is provided as a query parameter for all requests."]}),"\n",(0,r.jsxs)(n.li,{children:["The authenticated user has ",(0,r.jsx)(n.code,{children:"ADMIN"})," or ",(0,r.jsx)(n.code,{children:"EDITOR"})," permissions on that company."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,r.jsx)(n.h3,{id:"post-",children:(0,r.jsx)(n.code,{children:"POST /"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new relationship (dependency) between two projects."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Handled by the ",(0,r.jsx)(n.code,{children:"canEditCompanyResources"})," middleware."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Query Params:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"companyId"})," (string, required): The ID of the company to which both projects belong."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["Body (",(0,r.jsx)(n.code,{children:"application/json"}),"):"]})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sourceProjectId"})," (string, required): The ID of the project that has the dependency."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"targetProjectId"})," (string, required): The ID of the project that is being depended on."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"type"})," (string, required): The type of relationship (e.g., ",(0,r.jsx)(n.code,{children:"'API_CALL'"}),", ",(0,r.jsx)(n.code,{children:"'SHARED_LIBRARY'"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (string, optional): A description of the dependency."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"201"}),"):"]})," The new ",(0,r.jsx)(n.code,{children:"ProjectRelationship"})," object."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:["Error Response (",(0,r.jsx)(n.code,{children:"409"}),"):"]})," If the relationship already exists."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Verifies that both the source and target projects exist."}),"\n",(0,r.jsxs)(n.li,{children:["Verifies that both projects belong to the ",(0,r.jsx)(n.code,{children:"companyId"})," specified in the query parameter."]}),"\n",(0,r.jsxs)(n.li,{children:["Creates the ",(0,r.jsx)(n.code,{children:"ProjectRelationship"})," record."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"delete-id",children:(0,r.jsx)(n.code,{children:"DELETE /:id"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a project relationship."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Handled by the ",(0,r.jsx)(n.code,{children:"canEditCompanyResources"})," middleware."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL Params:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:":id"}),": The ID of the ",(0,r.jsx)(n.code,{children:"ProjectRelationship"})," to delete."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Query Params:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"companyId"})," (string, required): The ID of the company to which the projects belong."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"204"}),"):"]})," No content."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Behavior:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Finds the relationship by its ID."}),"\n",(0,r.jsxs)(n.li,{children:["Verifies that the relationship belongs to a project within the specified ",(0,r.jsx)(n.code,{children:"companyId"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Deletes the ",(0,r.jsx)(n.code,{children:"ProjectRelationship"})," record."]}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);