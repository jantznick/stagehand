import React, { useState, useEffect } from 'react';
import { Search, AlertCircle, Loader2 } from 'lucide-react';
import useFindingStore from '../../stores/useFindingStore';
import useDebounce from '../../hooks/useDebounce';

const SEVERITY_STYLES = {
  CRITICAL: 'bg-red-500/10 text-red-400 border-red-500/20',
  HIGH: 'bg-orange-500/10 text-orange-400 border-orange-500/20',
  MEDIUM: 'bg-yellow-500/10 text-yellow-400 border-yellow-500/20',
  LOW: 'bg-sky-500/10 text-sky-400 border-sky-500/20',
  UNKNOWN: 'bg-gray-500/10 text-gray-400 border-gray-500/20',
};

const ID_PATTERNS = {
  CVE: /^CVE-\d{4}-\d{4,}$/,
  GHSA: /^GHSA-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}$/i
};

const SeverityBadge = ({ severity }) => {
  const style = SEVERITY_STYLES[severity] || SEVERITY_STYLES.UNKNOWN;
  return (
    <span className={`px-2 py-1 text-xs font-medium rounded-full border ${style}`}>
      {severity}
    </span>
  );
};

export default function VulnerabilitySearch({
  onSelect,
  searchResults = [],
  isSearching = false,
  searchError = null,
  onSearch,
  onExternalLookup
}) {
  const [searchTerm, setSearchTerm] = useState('');
  const [externalId, setExternalId] = useState('');
  const [isExternalLookup, setIsExternalLookup] = useState(false);
  
  const debouncedSearchTerm = useDebounce(searchTerm, 300);

  const {
    vulnerabilitySearchResults,
    isSearching: storeIsSearching,
    searchError: storeSearchError,
    searchVulnerabilities,
    lookupExternalVulnerability,
    clearSearch,
  } = useFindingStore();

  // Handle searching when debounced query changes
  React.useEffect(() => {
    if (debouncedSearchTerm && debouncedSearchTerm.length >= 3) {
      onSearch(debouncedSearchTerm);
    }
  }, [debouncedSearchTerm, onSearch]);

  // Validate CVE/GHSA ID format
  const isValidExternalId = useCallback((id) => {
    return ID_PATTERNS.CVE.test(id) || ID_PATTERNS.GHSA.test(id);
  }, []);

  // Handle external lookup
  const handleExternalLookup = useCallback(async () => {
    if (!externalId || !isValidExternalId(externalId)) return;
    await onExternalLookup(externalId);
  }, [externalId, isValidExternalId, onExternalLookup]);

  useEffect(() => {
    if (debouncedSearchTerm) {
      if (debouncedSearchTerm.toUpperCase().startsWith('CVE-')) {
        lookupExternalVulnerability(debouncedSearchTerm.toUpperCase()).then(vuln => {
          if (vuln) {
            onSelect(vuln);
          }
        });
      } else {
        searchVulnerabilities(debouncedSearchTerm);
      }
    } else {
      clearSearch();
    }
  }, [debouncedSearchTerm, searchVulnerabilities, lookupExternalVulnerability, clearSearch, onSelect]);

  const handleSelect = (vulnerability) => {
    setSearchTerm('');
    clearSearch();
    onSelect(vulnerability);
  };

  return (
    <div className="space-y-4">
      {!isExternalLookup ? (
        /* Vulnerability Search */
        <>
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size={20} />
            <input
              type="text"
              placeholder="Search vulnerabilities..."
              className="w-full bg-black/20 border border-white/10 rounded-md pl-10 pr-4 py-2 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>

          {(isSearching || storeIsSearching) && (
            <div className="flex items-center justify-center py-4">
              <Loader2 className="animate-spin text-blue-500" size={24} />
            </div>
          )}

          {(searchError || storeSearchError) && (
            <div className="p-3 rounded bg-red-500/10 border border-red-500/20 text-red-400">
              <div className="flex items-center gap-2">
                <AlertCircle size={16} />
                <span>{searchError || storeSearchError}</span>
              </div>
            </div>
          )}

          {/* Search Results */}
          {vulnerabilitySearchResults.length > 0 && (
            <div className="space-y-2">
              {vulnerabilitySearchResults.map((vuln) => (
                <button
                  key={vuln.id}
                  type="button"
                  className="w-full p-3 text-left bg-black/20 rounded-md hover:bg-black/30 transition-colors border border-white/10"
                  onClick={() => handleSelect(vuln)}
                >
                  <div className="flex items-center justify-between">
                    <span className="font-medium text-white">{vuln.title}</span>
                    <SeverityBadge severity={vuln.severity} />
                  </div>
                  <p className="mt-1 text-sm text-gray-400 line-clamp-2">
                    {vuln.description}
                  </p>
                </button>
              ))}
            </div>
          )}

          <div className="text-center">
            <button
              type="button"
              className="text-blue-400 hover:text-blue-300 text-sm"
              onClick={() => setIsExternalLookup(true)}
            >
              Can't find it? Look up by CVE/GHSA ID
            </button>
          </div>
        </>
      ) : (
        /* External Lookup */
        <div className="space-y-4">
          <div className="flex gap-2">
            <input
              type="text"
              placeholder="Enter CVE or GHSA ID..."
              className={`flex-1 bg-black/20 border rounded-md px-4 py-2 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                externalId && !isValidExternalId(externalId)
                  ? 'border-red-500'
                  : 'border-white/10'
              }`}
              value={externalId}
              onChange={(e) => setExternalId(e.target.value.toUpperCase())}
            />
            <button
              type="button"
              className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors disabled:opacity-50"
              onClick={handleExternalLookup}
              disabled={!externalId || !isValidExternalId(externalId)}
            >
              Look up
            </button>
          </div>
          
          {externalId && !isValidExternalId(externalId) && (
            <p className="text-sm text-red-400">
              Invalid format. Use CVE-YYYY-NNNN or GHSA-XXXX-XXXX-XXXX
            </p>
          )}
          
          <p className="text-sm text-gray-400">
            Format: CVE-YYYY-NNNN or GHSA-XXXX-XXXX-XXXX
          </p>
          
          <button
            type="button"
            className="text-blue-400 hover:text-blue-300 text-sm"
            onClick={() => {
              setIsExternalLookup(false);
              setExternalId('');
            }}
          >
            Back to search
          </button>
        </div>
      )}
    </div>
  );
}