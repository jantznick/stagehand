{
  "openapi": "3.0.0",
  "info": {
    "title": "Stagehand API",
    "version": "1.0.0",
    "description": "A comprehensive API for managing security governance across organizational hierarchies",
    "contact": {
      "name": "Stagehand Development Team"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "session",
        "description": "Session cookie authentication"
      }
    },
    "schemas": {
      "Company": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "NavigationTreeNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "organization",
              "company",
              "team",
              "project"
            ]
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationTreeNode"
            }
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "STANDARD",
              "ENTERPRISE"
            ]
          },
          "defaultCompanyId": {
            "type": "string",
            "nullable": true
          },
          "hierarchyDisplayNames": {
            "type": "object"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "teamId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectTechnology": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "technologyId": {
            "type": "string"
          },
          "technology": {
            "$ref": "#/components/schemas/Technology"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Technology": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Technology ID"
          },
          "name": {
            "type": "string",
            "description": "Technology name"
          },
          "type": {
            "type": "string",
            "description": "Technology type/category"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PENDING"
            ]
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emailVerifiedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AcceptInvitationRequest": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Invitation token"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "Password (required if not using magic link)"
          },
          "useMagicLink": {
            "type": "boolean",
            "description": "Whether to use magic link authentication"
          }
        }
      },
      "DomainCheckResponse": {
        "type": "object",
        "properties": {
          "willJoin": {
            "type": "boolean",
            "description": "Whether user will auto-join an organization/company"
          },
          "entityType": {
            "type": "string",
            "enum": [
              "organization",
              "company"
            ],
            "description": "Type of entity user will join"
          },
          "entityName": {
            "type": "string",
            "description": "Name of organization/company user will join"
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User's password"
          }
        }
      },
      "MagicLinkRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          }
        }
      },
      "MagicLinkVerifyRequest": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Magic link token from email"
          }
        }
      },
      "OIDCCheckResponse": {
        "type": "object",
        "properties": {
          "ssoEnabled": {
            "type": "boolean",
            "description": "Whether SSO is enabled for this domain"
          },
          "buttonText": {
            "type": "string",
            "description": "Text to display on SSO button"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID for SSO"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User's password (required if not using magic link)"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "STANDARD",
              "ENTERPRISE"
            ],
            "description": "Account type for new organizations"
          },
          "useMagicLink": {
            "type": "boolean",
            "description": "Whether to use magic link authentication instead of password"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "required": [
          "token",
          "password"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Password reset token from email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "New password"
          }
        }
      },
      "VerifyEmailRequest": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Email verification token"
          }
        }
      },
      "AddDomainRequest": {
        "type": "object",
        "required": [
          "domain",
          "role"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "Email domain to add for auto-join"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "EDITOR",
              "READER"
            ],
            "description": "Default role for users joining via this domain"
          }
        }
      },
      "AutoJoinDomain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "EDITOR",
              "READER"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "VERIFIED"
            ]
          },
          "verificationCode": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateCompanyRequest": {
        "type": "object",
        "required": [
          "name",
          "organizationId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name"
          },
          "description": {
            "type": "string",
            "description": "Company description"
          },
          "organizationId": {
            "type": "string",
            "description": "Parent organization ID"
          }
        }
      },
      "UpdateCompanyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name"
          },
          "description": {
            "type": "string",
            "description": "Company description"
          }
        }
      },
      "OrganizationAddDomainRequest": {
        "type": "object",
        "required": [
          "domain",
          "role"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "Email domain (e.g., example.com)"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "EDITOR",
              "READER"
            ],
            "description": "Role to assign to users from this domain"
          }
        }
      },
      "OrganizationAutoJoinDomain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "domain": {
            "type": "string",
            "description": "Email domain"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "EDITOR",
              "READER"
            ],
            "description": "Role assigned to users from this domain"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID (if domain is for company-level auto-join)"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "VERIFIED"
            ],
            "description": "Domain verification status"
          },
          "verificationCode": {
            "type": "string",
            "description": "DNS verification code"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateOrganizationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "description": {
            "type": "string",
            "description": "Organization description"
          },
          "accountType": {
            "type": "string",
            "enum": [
              "STANDARD",
              "ENTERPRISE"
            ],
            "description": "Account type"
          },
          "defaultCompanyId": {
            "type": "string",
            "description": "Default company ID (required when downgrading to STANDARD)"
          },
          "hierarchyDisplayNames": {
            "type": "object",
            "description": "Custom display names for hierarchy levels"
          }
        }
      },
      "CreateTeamRequest": {
        "type": "object",
        "required": [
          "name",
          "companyId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Team name"
          },
          "description": {
            "type": "string",
            "description": "Team description"
          },
          "companyId": {
            "type": "string",
            "description": "Parent company ID"
          }
        }
      },
      "TeamWithProjects": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Team"
          },
          {
            "type": "object",
            "properties": {
              "projects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        ]
      },
      "UpdateTeamRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Team name"
          },
          "description": {
            "type": "string",
            "description": "Team description"
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "role": {
            "type": "string",
            "description": "Contact's role in the project"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateProjectRequest": {
        "type": "object",
        "required": [
          "name",
          "teamId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "description": {
            "type": "string",
            "description": "Project description"
          },
          "teamId": {
            "type": "string",
            "description": "Parent team ID"
          }
        }
      },
      "ProjectContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "contactId": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "user": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              }
            }
          },
          "projectMembership": {
            "type": "object",
            "nullable": true,
            "properties": {
              "userId": {
                "type": "string"
              },
              "role": {
                "type": "string",
                "enum": [
                  "ADMIN",
                  "EDITOR",
                  "READER"
                ]
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectDependency": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fromProjectId": {
            "type": "string"
          },
          "toProjectId": {
            "type": "string"
          },
          "dependencyType": {
            "type": "string",
            "enum": [
              "API",
              "DATABASE",
              "SERVICE",
              "LIBRARY"
            ],
            "description": "Type of dependency relationship"
          },
          "description": {
            "type": "string",
            "description": "Description of the dependency"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectDetailed": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Project"
          },
          {
            "type": "object",
            "properties": {
              "applicationUrl": {
                "type": "string",
                "description": "URL of the deployed application"
              },
              "version": {
                "type": "string",
                "description": "Current version of the application"
              },
              "deploymentStatus": {
                "type": "string",
                "enum": [
                  "DEVELOPMENT",
                  "STAGING",
                  "PRODUCTION",
                  "DEPRECATED"
                ],
                "description": "Current deployment status"
              },
              "repositoryUrl": {
                "type": "string",
                "description": "Source code repository URL"
              },
              "repositoryBranch": {
                "type": "string",
                "description": "Primary repository branch"
              },
              "repositoryProvider": {
                "type": "string",
                "enum": [
                  "GITHUB",
                  "GITLAB",
                  "BITBUCKET"
                ],
                "description": "Source code repository provider"
              },
              "ciCdPipelineUrl": {
                "type": "string",
                "description": "CI/CD pipeline URL"
              },
              "projectType": {
                "type": "string",
                "enum": [
                  "WEB_APPLICATION",
                  "MOBILE_APPLICATION",
                  "API",
                  "LIBRARY",
                  "MICROSERVICE",
                  "DATABASE",
                  "INFRASTRUCTURE"
                ],
                "description": "Type of project"
              },
              "dataClassification": {
                "type": "string",
                "enum": [
                  "PUBLIC",
                  "INTERNAL",
                  "CONFIDENTIAL",
                  "RESTRICTED"
                ],
                "description": "Data classification level"
              },
              "applicationCriticality": {
                "type": "string",
                "enum": [
                  "LOW",
                  "MEDIUM",
                  "HIGH",
                  "CRITICAL"
                ],
                "description": "Business criticality level"
              },
              "isExternallyExposed": {
                "type": "boolean",
                "description": "Whether the application is exposed to external users"
              },
              "communicationChannel": {
                "type": "string",
                "description": "Team communication channel (e.g., Slack channel)"
              },
              "documentationUrl": {
                "type": "string",
                "description": "Project documentation URL"
              },
              "apiReferenceUrl": {
                "type": "string",
                "description": "API reference documentation URL"
              },
              "runbookUrl": {
                "type": "string",
                "description": "Operational runbook URL"
              },
              "threatModelUrl": {
                "type": "string",
                "description": "Security threat model URL"
              },
              "lastSecurityReview": {
                "type": "string",
                "format": "date-time",
                "description": "Date of last security review"
              },
              "securityToolProjectId": {
                "type": "string",
                "description": "Associated security tool project ID"
              },
              "team": {
                "$ref": "#/components/schemas/TeamWithCompanyAndOrg"
              },
              "contacts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectContact"
                }
              },
              "technologies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectTechnology"
                }
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDependency"
                }
              }
            }
          }
        ]
      },
      "TeamWithCompanyAndOrg": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Team"
          },
          {
            "type": "object",
            "properties": {
              "company": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Company"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "organization": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "UpdateProjectRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name"
          },
          "description": {
            "type": "string",
            "description": "Project description"
          },
          "applicationUrl": {
            "type": "string",
            "description": "URL of the deployed application"
          },
          "version": {
            "type": "string",
            "description": "Current version of the application"
          },
          "deploymentStatus": {
            "type": "string",
            "enum": [
              "DEVELOPMENT",
              "STAGING",
              "PRODUCTION",
              "DEPRECATED"
            ],
            "description": "Current deployment status"
          },
          "repositoryUrl": {
            "type": "string",
            "description": "Source code repository URL"
          },
          "ciCdPipelineUrl": {
            "type": "string",
            "description": "CI/CD pipeline URL"
          },
          "projectType": {
            "type": "string",
            "enum": [
              "WEB_APPLICATION",
              "MOBILE_APPLICATION",
              "API",
              "LIBRARY",
              "MICROSERVICE",
              "DATABASE",
              "INFRASTRUCTURE"
            ],
            "description": "Type of project"
          },
          "dataClassification": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "INTERNAL",
              "CONFIDENTIAL",
              "RESTRICTED"
            ],
            "description": "Data classification level"
          },
          "applicationCriticality": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "description": "Business criticality level"
          },
          "isExternallyExposed": {
            "type": "boolean",
            "description": "Whether the application is exposed to external users"
          },
          "communicationChannel": {
            "type": "string",
            "description": "Team communication channel (e.g., Slack channel)"
          },
          "documentationUrl": {
            "type": "string",
            "description": "Project documentation URL"
          },
          "apiReferenceUrl": {
            "type": "string",
            "description": "API reference documentation URL"
          },
          "runbookUrl": {
            "type": "string",
            "description": "Operational runbook URL"
          },
          "threatModelUrl": {
            "type": "string",
            "description": "Security threat model URL"
          },
          "lastSecurityReview": {
            "type": "string",
            "format": "date-time",
            "description": "Date of last security review"
          }
        }
      },
      "CreateRelationshipRequest": {
        "type": "object",
        "required": [
          "sourceProjectId",
          "targetProjectId",
          "type"
        ],
        "properties": {
          "sourceProjectId": {
            "type": "string",
            "description": "Source project ID"
          },
          "targetProjectId": {
            "type": "string",
            "description": "Target project ID"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEPENDS_ON",
              "USES",
              "INTEGRATES_WITH",
              "EXTENDS"
            ],
            "description": "Type of relationship"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the relationship"
          }
        }
      },
      "ProjectRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Relationship ID"
          },
          "sourceProjectId": {
            "type": "string",
            "description": "Source project ID (the project that depends on another)"
          },
          "targetProjectId": {
            "type": "string",
            "description": "Target project ID (the project being depended upon)"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEPENDS_ON",
              "USES",
              "INTEGRATES_WITH",
              "EXTENDS"
            ],
            "description": "Type of relationship between projects"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description of the relationship"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateRelationshipRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DEPENDS_ON",
              "USES",
              "INTEGRATES_WITH",
              "EXTENDS"
            ],
            "description": "Updated relationship type"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the relationship"
          }
        }
      },
      "FindingWithVulnerability": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Finding"
          },
          {
            "type": "object",
            "properties": {
              "vulnerability": {
                "$ref": "#/components/schemas/Vulnerability"
              }
            }
          }
        ]
      },
      "Vulnerability": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cveId": {
            "type": "string",
            "description": "CVE identifier"
          },
          "title": {
            "type": "string",
            "description": "Vulnerability title"
          },
          "description": {
            "type": "string",
            "description": "Detailed vulnerability description"
          },
          "severity": {
            "type": "string",
            "enum": [
              "CRITICAL",
              "HIGH",
              "MEDIUM",
              "LOW",
              "INFO"
            ],
            "description": "Vulnerability severity level"
          },
          "cvssScore": {
            "type": "number",
            "format": "float",
            "description": "CVSS score"
          },
          "packageName": {
            "type": "string",
            "description": "Affected package name"
          },
          "packageVersion": {
            "type": "string",
            "description": "Affected package version"
          },
          "fixedVersion": {
            "type": "string",
            "description": "Version that fixes the vulnerability"
          },
          "references": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Reference URLs"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CompanyHierarchy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HierarchyItem"
          },
          {
            "type": "object",
            "properties": {
              "teams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamHierarchy"
                }
              }
            }
          }
        ]
      },
      "HierarchyItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "organization",
              "company",
              "team",
              "project"
            ]
          },
          "isMember": {
            "type": "boolean",
            "description": "Whether the user is a direct member of this item"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationHierarchy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HierarchyItem"
          },
          {
            "type": "object",
            "properties": {
              "companies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CompanyHierarchy"
                }
              }
            }
          }
        ]
      },
      "ProjectSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "repositoryUrl": {
            "type": "string"
          }
        }
      },
      "TeamHierarchy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HierarchyItem"
          },
          {
            "type": "object",
            "properties": {
              "projects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HierarchyItem"
                }
              }
            }
          }
        ]
      },
      "InvitationWithRecipient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Invitation ID"
          },
          "recipientEmail": {
            "type": "string",
            "format": "email",
            "description": "Email address of the invitation recipient"
          },
          "recipientName": {
            "type": "string",
            "description": "Name of the invitation recipient"
          },
          "inviterName": {
            "type": "string",
            "description": "Name of the user who sent the invitation"
          },
          "invitationLink": {
            "type": "string",
            "description": "Magic link for the invitation"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the invitation expires"
          },
          "acceptedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the invitation was accepted (null if not yet accepted)"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the invitation was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the invitation was last updated"
          }
        }
      },
      "CreateOIDCConfigRequest": {
        "type": "object",
        "required": [
          "name",
          "issuer",
          "clientId",
          "clientSecret",
          "organizationId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name for the OIDC provider"
          },
          "issuer": {
            "type": "string",
            "description": "OIDC issuer URL"
          },
          "clientId": {
            "type": "string",
            "description": "OIDC client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "OIDC client secret (will be encrypted)"
          },
          "scopes": {
            "type": "string",
            "description": "OIDC scopes (space-separated)",
            "default": "openid profile email"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID to associate with"
          }
        }
      },
      "OIDCConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "OIDC configuration ID"
          },
          "name": {
            "type": "string",
            "description": "Display name for the OIDC provider"
          },
          "issuer": {
            "type": "string",
            "description": "OIDC issuer URL"
          },
          "clientId": {
            "type": "string",
            "description": "OIDC client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "Encrypted OIDC client secret"
          },
          "scopes": {
            "type": "string",
            "description": "OIDC scopes (space-separated)"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID this configuration belongs to"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this OIDC configuration is active"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UpdateOIDCConfigRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name for the OIDC provider"
          },
          "issuer": {
            "type": "string",
            "description": "OIDC issuer URL"
          },
          "clientId": {
            "type": "string",
            "description": "OIDC client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "OIDC client secret (will be encrypted)"
          },
          "scopes": {
            "type": "string",
            "description": "OIDC scopes (space-separated)"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether this OIDC configuration is active"
          }
        }
      },
      "CreateMembershipRequest": {
        "type": "object",
        "required": [
          "userId",
          "role"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID to grant membership to"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "EDITOR",
              "READER"
            ],
            "description": "Role to assign to the user"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID (if adding organization-level membership)"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID (if adding company-level membership)"
          },
          "teamId": {
            "type": "string",
            "description": "Team ID (if adding team-level membership)"
          },
          "projectId": {
            "type": "string",
            "description": "Project ID (if adding project-level membership)"
          }
        }
      },
      "MembershipWithUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Membership"
          },
          {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "effectiveRole": {
                "type": "string",
                "enum": [
                  "ADMIN",
                  "EDITOR",
                  "READER"
                ],
                "description": "Effective role considering hierarchy inheritance"
              }
            }
          }
        ]
      },
      "UpdateMembershipRequest": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "EDITOR",
              "READER"
            ],
            "description": "New role to assign to the user"
          }
        }
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "GITHUB"
            ],
            "description": "Integration type"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID this integration belongs to"
          },
          "installationId": {
            "type": "string",
            "description": "GitHub App installation ID"
          },
          "ownerName": {
            "type": "string",
            "description": "GitHub organization/user name"
          },
          "repositoryCount": {
            "type": "integer",
            "description": "Number of repositories in this integration"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LinkRepositoryRequest": {
        "type": "object",
        "required": [
          "repositoryIds",
          "projectIds"
        ],
        "properties": {
          "repositoryIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Repository IDs to link"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Project IDs to link repositories to"
          }
        }
      },
      "Repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Repository name"
          },
          "fullName": {
            "type": "string",
            "description": "Full repository name (owner/repo)"
          },
          "url": {
            "type": "string",
            "description": "Repository URL"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether repository is private"
          },
          "description": {
            "type": "string",
            "description": "Repository description"
          },
          "language": {
            "type": "string",
            "description": "Primary programming language"
          },
          "integrationId": {
            "type": "string",
            "description": "Integration ID this repository belongs to"
          },
          "externalId": {
            "type": "string",
            "description": "External repository ID from the SCM provider"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateSecurityToolRequest": {
        "type": "object",
        "required": [
          "provider",
          "type",
          "resourceType",
          "resourceId",
          "credentials"
        ],
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "Snyk"
            ],
            "description": "Security tool provider name"
          },
          "type": {
            "type": "string",
            "enum": [
              "SNYK"
            ],
            "description": "Type of security tool"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the security tool integration"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "organization",
              "company",
              "team",
              "project"
            ],
            "description": "Type of resource to associate with"
          },
          "resourceId": {
            "type": "string",
            "description": "Resource ID to associate with"
          },
          "credentials": {
            "type": "object",
            "description": "Security tool credentials (will be encrypted)",
            "properties": {
              "apiToken": {
                "type": "string",
                "description": "API token for the security tool"
              },
              "orgId": {
                "type": "string",
                "description": "Organization ID in the security tool"
              }
            }
          }
        }
      },
      "LinkSecurityToolProjectRequest": {
        "type": "object",
        "required": [
          "securityToolProjectIds",
          "projectIds"
        ],
        "properties": {
          "securityToolProjectIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Security tool project IDs to link"
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Application project IDs to link to"
          }
        }
      },
      "SecurityTool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Security tool name"
          },
          "type": {
            "type": "string",
            "enum": [
              "SNYK"
            ],
            "description": "Type of security tool"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID this tool belongs to"
          },
          "credentials": {
            "type": "string",
            "description": "Encrypted credentials for the tool"
          },
          "lastSyncAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last synchronization timestamp"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SecurityToolProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Project name in security tool"
          },
          "externalId": {
            "type": "string",
            "description": "External project ID from security tool"
          },
          "url": {
            "type": "string",
            "description": "Project URL in security tool"
          },
          "securityToolId": {
            "type": "string",
            "description": "Security tool ID this project belongs to"
          },
          "lastScanAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last scan timestamp"
          },
          "vulnerabilityCount": {
            "type": "integer",
            "description": "Total number of vulnerabilities found"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LaunchScanRequest": {
        "type": "object",
        "required": [
          "targetUrl"
        ],
        "properties": {
          "targetUrl": {
            "type": "string",
            "format": "uri",
            "description": "The URL to scan"
          },
          "provider": {
            "type": "string",
            "enum": [
              "OWASP_ZAP"
            ],
            "default": "OWASP_ZAP",
            "description": "DAST tool provider"
          },
          "scanType": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PASSIVE",
              "BASELINE"
            ],
            "default": "ACTIVE",
            "description": "Type of scan to perform"
          },
          "scanConfig": {
            "type": "object",
            "description": "Tool-specific scan configuration"
          }
        }
      },
      "ScanExecution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "provider": {
            "type": "string",
            "enum": [
              "OWASP_ZAP",
              "BURP_SUITE",
              "ACUNETIX"
            ]
          },
          "targetUrl": {
            "type": "string"
          },
          "scanType": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PASSIVE",
              "BASELINE",
              "FULL",
              "CUSTOM"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "QUEUED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ]
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "queuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "integer",
            "description": "Scan duration in seconds"
          },
          "findingsCount": {
            "type": "integer"
          },
          "criticalCount": {
            "type": "integer"
          },
          "highCount": {
            "type": "integer"
          },
          "mediumCount": {
            "type": "integer"
          },
          "lowCount": {
            "type": "integer"
          },
          "infoCount": {
            "type": "integer"
          },
          "errorMessage": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/auth/register": {
      "post": {
        "summary": "Register a new user account",
        "description": "Creates a new user account with automatic organization/company assignment based on email domain or creates new organization",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "A magic link has been sent to user@example.com"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Authenticate user with email and password",
        "description": "Logs in a user using email and password credentials",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Log out current user",
        "description": "Terminates the user's session and clears authentication cookies",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/forgot-password": {
      "post": {
        "summary": "Request password reset",
        "description": "Sends a password reset link to the user's email address",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent (or user not found - same response for security)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "If an account with that email exists, a password reset link has been sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/reset-password": {
      "post": {
        "summary": "Reset user password",
        "description": "Resets user password using a valid reset token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully reset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password has been reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid token or password requirements not met",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/check-domain": {
      "get": {
        "summary": "Check if email domain has auto-join configuration",
        "description": "Checks if the provided email domain will auto-join an organization or company",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Email address to check domain for"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain check result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/invitation/{token}": {
      "get": {
        "summary": "Get invitation details",
        "description": "Retrieves invitation details for display before accepting",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Invitation token"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invitation": {
                      "$ref": "#/components/schemas/Invitation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/accept-invitation": {
      "post": {
        "summary": "Accept invitation and create account",
        "description": "Accepts an invitation to join an organization/company and creates user account",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invitation accepted and user created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "A magic link has been sent to user@example.com"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/oidc": {
      "get": {
        "summary": "Initiate OIDC authentication",
        "description": "Starts OIDC/SSO authentication flow for an organization",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID for OIDC configuration"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to OIDC provider"
          },
          "400": {
            "description": "OIDC not configured or invalid organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/me": {
      "get": {
        "summary": "Get current user information",
        "description": "Returns the authenticated user's profile information",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/check-oidc": {
      "get": {
        "summary": "Check if OIDC/SSO is enabled for email domain",
        "description": "Checks if SSO is configured for the email domain and returns SSO details",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email"
            },
            "description": "Email address to check for SSO"
          }
        ],
        "responses": {
          "200": {
            "description": "OIDC check result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCCheckResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/verify-email": {
      "post": {
        "summary": "Verify email address with token",
        "description": "Verifies user's email address using verification token",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/resend-verification": {
      "post": {
        "summary": "Resend email verification code",
        "description": "Sends a new email verification code to the authenticated user",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "New verification code sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "A new verification code has been sent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/magic-link": {
      "post": {
        "summary": "Request magic link for passwordless login",
        "description": "Sends a magic login link to the user's email address",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MagicLinkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Magic link sent (or user not found - same response for security)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "If an account with this email exists, a magic link has been sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/magic-link/verify": {
      "post": {
        "summary": "Verify magic link token and log in",
        "description": "Verifies a magic link token and logs the user in",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MagicLinkVerifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in via magic link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid, used, or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/companies/{id}": {
      "get": {
        "summary": "Get company by ID",
        "description": "Retrieves a single company by its ID",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Company details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update company details",
        "description": "Updates company information such as name and description",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete company",
        "description": "Permanently deletes a company and all associated data",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Company successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/companies": {
      "get": {
        "summary": "List all companies user has access to",
        "description": "Returns all companies that the authenticated user has access to view",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of companies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new company",
        "description": "Creates a new company within an organization",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create company in this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/companies/{id}/domains": {
      "get": {
        "summary": "Get auto-join domains for company",
        "description": "Retrieves all auto-join domain configurations for a company",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of auto-join domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoJoinDomain"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view domains for this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add auto-join domain to company",
        "description": "Adds a new email domain for automatic user registration to the company",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDomainRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoJoinDomain"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or public domain not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage domains for this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Domain already added to this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/companies/{id}/domains/{domainMappingId}/verify": {
      "post": {
        "summary": "Verify company domain ownership via DNS",
        "description": "Verifies domain ownership by checking for a specific TXT record in DNS",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          },
          {
            "in": "path",
            "name": "domainMappingId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Domain mapping ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoJoinDomain"
                }
              }
            }
          },
          "400": {
            "description": "DNS verification failed or TXT record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage domains for this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Domain mapping not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/companies/{id}/domains/{domainMappingId}": {
      "delete": {
        "summary": "Remove auto-join domain from company",
        "description": "Removes an auto-join domain configuration from the company",
        "tags": [
          "Companies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID"
          },
          {
            "in": "path",
            "name": "domainMappingId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Domain mapping ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Domain successfully removed"
          },
          "403": {
            "description": "Not authorized to manage domains for this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Domain mapping not found or does not belong to this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{id}": {
      "get": {
        "summary": "Get organization by ID",
        "description": "Retrieves a single organization by its ID",
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update organization",
        "description": "Updates organization details including account type, name, and other settings",
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{id}/domains": {
      "get": {
        "summary": "Get auto-join domains for organization",
        "description": "Retrieves all auto-join domain configurations for an organization",
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of auto-join domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationAutoJoinDomain"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view domains for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add auto-join domain to organization",
        "description": "Adds a new email domain for automatic user registration to the organization",
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationAddDomainRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAutoJoinDomain"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or public domain not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage domains for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Domain already added to this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{id}/domains/{domainMappingId}/verify": {
      "post": {
        "summary": "Verify domain ownership via DNS",
        "description": "Verifies domain ownership by checking for a specific TXT record in DNS",
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID"
          },
          {
            "in": "path",
            "name": "domainMappingId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Domain mapping ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Domain successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAutoJoinDomain"
                }
              }
            }
          },
          "400": {
            "description": "DNS verification failed or TXT record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage domains for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Domain mapping not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations/{id}/domains/{domainMappingId}": {
      "delete": {
        "summary": "Remove auto-join domain from organization",
        "description": "Removes an auto-join domain configuration from the organization",
        "tags": [
          "Organizations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID"
          },
          {
            "in": "path",
            "name": "domainMappingId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Domain mapping ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Domain successfully removed"
          },
          "403": {
            "description": "Not authorized to manage domains for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Domain mapping not found or does not belong to this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/teams/{id}": {
      "put": {
        "summary": "Update team details",
        "description": "Updates team information such as name and description",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Team ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete team",
        "description": "Permanently deletes a team and all associated data",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Team ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Team successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/teams": {
      "get": {
        "summary": "List all teams user has access to",
        "description": "Returns all teams that the authenticated user has access to view",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new team",
        "description": "Creates a new team within a company",
        "tags": [
          "Teams"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create team in this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}": {
      "get": {
        "summary": "Get project by ID with full details",
        "description": "Retrieves a single project with comprehensive details including team hierarchy, contacts, technologies, and dependencies",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed project information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailed"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update project details",
        "description": "Updates project information including application details, security metadata, and operational information",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project",
        "description": "Permanently deletes a project and all associated data",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Project successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects": {
      "get": {
        "summary": "List all projects user has access to",
        "description": "Returns all projects that the authenticated user has access to view",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new project",
        "description": "Creates a new project within a team and assigns creator as admin",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create project in this team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}/members": {
      "get": {
        "summary": "Get project members",
        "description": "Retrieves all users with access to the project from the parent organization, excluding those already assigned as contacts",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of available project members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string",
                        "format": "email"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}/contacts": {
      "post": {
        "summary": "Add contact to project",
        "description": "Adds a new contact to the project with specified role. Creates contact if it doesn't exist.",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "name",
                  "role"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Contact email address"
                  },
                  "name": {
                    "type": "string",
                    "description": "Contact full name"
                  },
                  "role": {
                    "type": "string",
                    "description": "Contact role in the project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContact"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to add contacts to this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Contact already associated with this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{projectId}/contacts/{contactId}": {
      "put": {
        "summary": "Update project contact",
        "description": "Updates contact information and role for a project",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "oldContactType",
                  "newContactType"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated contact name"
                  },
                  "oldContactType": {
                    "type": "string",
                    "description": "Current contact role/type"
                  },
                  "newContactType": {
                    "type": "string",
                    "description": "New contact role/type"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectContact"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update contacts for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Contact with new role already exists for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}/contacts/{contactId}/{contactType}": {
      "delete": {
        "summary": "Remove contact from project",
        "description": "Removes a contact association from the project",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact ID"
          },
          {
            "in": "path",
            "name": "contactType",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Contact type/role"
          }
        ],
        "responses": {
          "204": {
            "description": "Contact successfully removed"
          },
          "400": {
            "description": "Missing required parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to remove contacts from this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}/technologies": {
      "get": {
        "summary": "Get project technologies",
        "description": "Retrieves all technologies associated with the project",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of project technologies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTechnology"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add technology to project",
        "description": "Associates a technology with the project. Can add new technology or reference existing one.",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Technology name (required if technologyId not provided)"
                  },
                  "type": {
                    "type": "string",
                    "description": "Technology type (required if technologyId not provided)"
                  },
                  "version": {
                    "type": "string",
                    "description": "Technology version"
                  },
                  "technologyId": {
                    "type": "string",
                    "description": "Existing technology ID (alternative to name/type)"
                  },
                  "source": {
                    "type": "string",
                    "default": "user-entered",
                    "description": "Source of the technology information"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Technology successfully added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTechnology"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to add technologies to this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Specified technology does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Technology with this version already exists for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}/technologies/{projectTechnologyId}": {
      "put": {
        "summary": "Update project technology version",
        "description": "Updates the version of a technology associated with the project",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "projectTechnologyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project technology association ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "description": "New technology version"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Technology version successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTechnology"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update technologies for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Technology association not found for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Technology with this version already exists for this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove technology from project",
        "description": "Removes a technology association from the project",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          },
          {
            "in": "path",
            "name": "projectTechnologyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project technology association ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Technology successfully removed"
          },
          "403": {
            "description": "Not authorized to remove technologies from this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Technology association not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/graph": {
      "get": {
        "summary": "Get company-wide project dependency graph",
        "description": "Retrieves project nodes and relationship edges for a company's dependency graph visualization",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID to get project graph for"
          }
        ],
        "responses": {
          "200": {
            "description": "Project graph data with nodes and edges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "example": "default"
                          },
                          "data": {
                            "type": "object",
                            "properties": {
                              "label": {
                                "type": "string"
                              }
                            }
                          },
                          "position": {
                            "type": "object",
                            "properties": {
                              "x": {
                                "type": "number"
                              },
                              "y": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    },
                    "edges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "source": {
                            "type": "string"
                          },
                          "target": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "example": "default"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Company ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not a member of this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{id}/graph": {
      "get": {
        "summary": "Get project-specific dependency mini-graph",
        "description": "Retrieves a focused dependency graph for a specific project showing its immediate relationships",
        "tags": [
          "Projects"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project mini-graph data with nodes and edges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nodes": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "edges": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/relationships": {
      "get": {
        "summary": "Get project relationships",
        "description": "Retrieves all relationships for projects within a specific company",
        "tags": [
          "Relationships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Company ID to get project relationships for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of project relationships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectRelationship"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Company ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view relationships for this company",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create project relationship",
        "description": "Creates a new dependency relationship between two projects",
        "tags": [
          "Relationships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Relationship successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRelationship"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or cannot create self-referencing relationship",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create relationships between these projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "One or both projects not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Relationship already exists between these projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/relationships/{id}": {
      "put": {
        "summary": "Update project relationship",
        "description": "Updates an existing project relationship's type or description",
        "tags": [
          "Relationships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Relationship ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Relationship successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRelationship"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this relationship",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete project relationship",
        "description": "Removes a project relationship",
        "tags": [
          "Relationships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Relationship ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Relationship successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this relationship",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Relationship not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/technologies/search": {
      "get": {
        "summary": "Search technologies",
        "description": "Searches for technologies by name with autocomplete functionality",
        "tags": [
          "Technologies"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "Search query for technology name"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1,
              "maximum": 50
            },
            "description": "Maximum number of results to return"
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching technologies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Technology"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Search query is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{projectId}/findings": {
      "get": {
        "summary": "Get security findings for a project",
        "description": "Retrieves all security vulnerability findings for a specific project",
        "tags": [
          "Security Findings"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID to fetch findings for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of security findings with vulnerability details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FindingWithVulnerability"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied - insufficient permissions to view findings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/hierarchy": {
      "get": {
        "summary": "Get user's accessible organizational hierarchy",
        "description": "Returns the complete organizational hierarchy that the authenticated user has access to, structured as nested organizations, companies, teams, and projects",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Hierarchical structure of accessible organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationHierarchy"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/hierarchy/{resourceType}/{resourceId}/projects": {
      "get": {
        "summary": "Get all projects within a resource's hierarchy",
        "description": "Returns a flat list of all projects within the specified resource's hierarchy",
        "tags": [
          "Hierarchy"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "organization",
                "company",
                "team",
                "project"
              ]
            },
            "description": "Type of resource"
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects within the resource hierarchy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectSummary"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/invitations": {
      "get": {
        "summary": "Get pending invitations for a resource",
        "description": "Retrieves all pending (unaccepted) invitations for a specific organization, company, team, or project",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "schema": {
              "type": "string"
            },
            "description": "Organization ID to get invitations for"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "type": "string"
            },
            "description": "Company ID to get invitations for"
          },
          {
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string"
            },
            "description": "Team ID to get invitations for"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "Project ID to get invitations for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of pending invitations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvitationWithRecipient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Exactly one resource ID must be provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view invitations for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/invitations/{id}/resend": {
      "post": {
        "summary": "Resend invitation",
        "description": "Resends an existing invitation email to the recipient with a new expiration time",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Invitation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation successfully resent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invitation resent successfully"
                    },
                    "invitation": {
                      "$ref": "#/components/schemas/InvitationWithRecipient"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to resend this invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Invitation has already been accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during resend",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/invitations/{id}": {
      "delete": {
        "summary": "Cancel invitation",
        "description": "Cancels (deletes) a pending invitation",
        "tags": [
          "Invitations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Invitation ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation successfully cancelled"
          },
          "403": {
            "description": "Not authorized to cancel this invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Invitation not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during cancellation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oidc": {
      "get": {
        "summary": "Get OIDC configurations for organization",
        "description": "Retrieves all OIDC configurations for a specific organization",
        "tags": [
          "OIDC"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID to get OIDC configurations for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of OIDC configurations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OIDCConfig"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Organization ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view OIDC configurations for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create OIDC configuration",
        "description": "Creates a new OIDC SSO configuration for an organization",
        "tags": [
          "OIDC"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOIDCConfigRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OIDC configuration successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCConfig"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create OIDC configurations for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oidc/{id}": {
      "put": {
        "summary": "Update OIDC configuration",
        "description": "Updates an existing OIDC configuration",
        "tags": [
          "OIDC"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OIDC configuration ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOIDCConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OIDC configuration successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OIDCConfig"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to update this OIDC configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "OIDC configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete OIDC configuration",
        "description": "Removes an OIDC configuration from the organization",
        "tags": [
          "OIDC"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OIDC configuration ID"
          }
        ],
        "responses": {
          "204": {
            "description": "OIDC configuration successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this OIDC configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "OIDC configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/oidc/{id}/test": {
      "post": {
        "summary": "Test OIDC configuration",
        "description": "Tests the OIDC configuration by attempting to discover the provider endpoints",
        "tags": [
          "OIDC"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "OIDC configuration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OIDC configuration test successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "OIDC configuration is valid"
                    },
                    "discovery": {
                      "type": "object",
                      "description": "OIDC discovery document information"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "OIDC configuration test failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to test this OIDC configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "OIDC configuration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/memberships": {
      "get": {
        "summary": "Get memberships for a resource",
        "description": "Retrieves all memberships for a specific organization, company, team, or project including effective roles from hierarchy inheritance",
        "tags": [
          "Memberships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "schema": {
              "type": "string"
            },
            "description": "Organization ID to get memberships for"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "type": "string"
            },
            "description": "Company ID to get memberships for"
          },
          {
            "in": "query",
            "name": "teamId",
            "schema": {
              "type": "string"
            },
            "description": "Team ID to get memberships for"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "Project ID to get memberships for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of memberships with effective roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipWithUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Exactly one resource ID must be provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view memberships for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new membership",
        "description": "Adds a user to an organization, company, team, or project with specified role",
        "tags": [
          "Memberships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Membership successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or exactly one resource ID required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage memberships for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User or resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "User already has membership for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/memberships/{id}": {
      "put": {
        "summary": "Update membership role",
        "description": "Updates the role of an existing membership",
        "tags": [
          "Memberships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Membership ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMembershipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "400": {
            "description": "Invalid role provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage this membership",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Membership not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove membership",
        "description": "Removes a user's membership from an organization, company, team, or project",
        "tags": [
          "Memberships"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Membership ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Membership successfully removed"
          },
          "403": {
            "description": "Not authorized to remove this membership",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Membership not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/github/install": {
      "get": {
        "summary": "Get GitHub App installation URL",
        "description": "Generates the URL to install the GitHub App for an organization",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID to install GitHub App for"
          }
        ],
        "responses": {
          "200": {
            "description": "GitHub App installation URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "installUrl": {
                      "type": "string",
                      "description": "URL to install the GitHub App"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Organization ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to manage integrations for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/github/callback": {
      "get": {
        "summary": "Handle GitHub App installation callback",
        "description": "Processes the callback from GitHub after App installation, creating the integration record",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "installation_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "GitHub App installation ID"
          },
          {
            "in": "query",
            "name": "setup_action",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "install",
                "update"
              ]
            },
            "description": "Setup action performed"
          },
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "State parameter containing organization ID"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to frontend with success/error status"
          },
          "400": {
            "description": "Missing required parameters or invalid state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized or user session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during integration setup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations": {
      "get": {
        "summary": "Get organization integrations",
        "description": "Retrieves all integrations for a specific organization",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "organizationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Organization ID to get integrations for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of organization integrations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Organization ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view integrations for this organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/{integrationId}/repositories": {
      "get": {
        "summary": "Get repositories for integration",
        "description": "Retrieves all repositories associated with a specific integration",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of repositories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Repository"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Integration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/{integrationId}/sync": {
      "post": {
        "summary": "Sync integration repositories",
        "description": "Synchronizes repositories from the SCM provider, updating the local database",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sync completed successfully"
                    },
                    "added": {
                      "type": "integer",
                      "description": "Number of new repositories added"
                    },
                    "updated": {
                      "type": "integer",
                      "description": "Number of existing repositories updated"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to sync this integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Integration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during sync",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/link-repositories": {
      "post": {
        "summary": "Link repositories to projects",
        "description": "Creates associations between repositories and projects",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkRepositoryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Repositories successfully linked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Repositories linked successfully"
                    },
                    "linkedCount": {
                      "type": "integer",
                      "description": "Number of repository-project links created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required data (repositoryIds and projectIds)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to link repositories to projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during linking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/integrations/{integrationId}": {
      "delete": {
        "summary": "Delete integration",
        "description": "Removes an integration and all associated repositories and links",
        "tags": [
          "Integrations"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Integration ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Integration successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Integration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools": {
      "get": {
        "summary": "Get security tools for resource",
        "description": "Retrieves all security tool integrations for a specific resource (organization, company, team, or project)",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "resourceType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "organization",
                "company",
                "team",
                "project"
              ]
            },
            "description": "Type of resource to get security tools for"
          },
          {
            "in": "query",
            "name": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Resource ID to get security tools for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of security tools",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityTool"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Resource type and ID are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view security tools for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create security tool integration",
        "description": "Creates a new security tool integration with encrypted credential storage",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecurityToolRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Security tool successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityTool"
                }
              }
            }
          },
          "400": {
            "description": "Missing required fields or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to create security tools for this resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/{securityToolId}/projects": {
      "get": {
        "summary": "Get security tool projects",
        "description": "Retrieves all projects from a specific security tool integration",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "securityToolId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security tool ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of security tool projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityToolProject"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to view this security tool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Security tool not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/{securityToolId}/sync": {
      "post": {
        "summary": "Sync security tool projects",
        "description": "Synchronizes projects and findings from the security tool, updating the local database",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "securityToolId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security tool ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sync completed successfully"
                    },
                    "projectsAdded": {
                      "type": "integer",
                      "description": "Number of new projects added"
                    },
                    "projectsUpdated": {
                      "type": "integer",
                      "description": "Number of existing projects updated"
                    },
                    "findingsAdded": {
                      "type": "integer",
                      "description": "Number of new findings added"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to sync this security tool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Security tool not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during sync",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/link-projects": {
      "post": {
        "summary": "Link security tool projects to applications",
        "description": "Creates associations between security tool projects and application projects",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkSecurityToolProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Projects successfully linked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Security tool projects linked successfully"
                    },
                    "linkedCount": {
                      "type": "integer",
                      "description": "Number of project links created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing required data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to link projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during linking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/{securityToolId}": {
      "delete": {
        "summary": "Delete security tool integration",
        "description": "Removes a security tool integration and all associated projects and findings",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "securityToolId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security tool ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Security tool successfully deleted"
          },
          "403": {
            "description": "Not authorized to delete this security tool",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Security tool not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error during deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/{integrationId}/snyk/projects": {
      "get": {
        "summary": "Get Snyk projects from integration",
        "description": "Retrieves all projects from a Snyk security tool integration via Snyk API",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security tool integration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Snyk projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "origin": {
                        "type": "string"
                      },
                      "browseUrl": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing Snyk credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized to access this integration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Snyk integration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/{integrationId}/sync": {
      "post": {
        "summary": "Sync security tool findings",
        "description": "Triggers background synchronization of security findings for specific projects from the security tool",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security tool integration ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "projectIds"
                ],
                "properties": {
                  "projectIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of project IDs to sync findings for"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Sync process initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Sync process initiated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Security tool integration not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/security-tools/{integrationId}/sync-logs": {
      "get": {
        "summary": "Get security tool sync logs",
        "description": "Retrieves the last 20 synchronization logs for a security tool integration",
        "tags": [
          "Security Tools"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "integrationId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Security tool integration ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of sync logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "securityToolIntegrationId": {
                        "type": "string"
                      },
                      "startTime": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "STARTED",
                          "COMPLETED",
                          "FAILED"
                        ]
                      },
                      "errorMessage": {
                        "type": "string",
                        "nullable": true
                      },
                      "projectsSynced": {
                        "type": "integer"
                      },
                      "findingsAdded": {
                        "type": "integer"
                      },
                      "findingsUpdated": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/projects/{projectId}/dast/scan": {
      "post": {
        "summary": "Launch a DAST scan",
        "description": "Launches a new DAST scan for the specified project with URL confirmation",
        "tags": [
          "DAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID to scan"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchScanRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Scan launched successfully and running in background",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "DAST scan launched successfully"
                    },
                    "scanExecutionId": {
                      "type": "string"
                    },
                    "scanExecution": {
                      "$ref": "#/components/schemas/ScanExecution"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "403": {
            "description": "Insufficient permissions (requires ADMIN or EDITOR role)"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/projects/{projectId}/dast/scans": {
      "get": {
        "summary": "Get DAST scans for project",
        "description": "Retrieves all DAST scans for a specific project",
        "tags": [
          "DAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID to get scans for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of DAST scans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScanExecution"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/dast/scans/{scanId}": {
      "get": {
        "summary": "Get DAST scan details",
        "description": "Retrieves detailed information about a specific DAST scan",
        "tags": [
          "DAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Scan execution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "DAST scan details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScanExecution"
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Scan not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "delete": {
        "summary": "Cancel DAST scan",
        "description": "Cancels a running DAST scan",
        "tags": [
          "DAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Scan execution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Scan cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Scan cancelled successfully"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Scan not found"
          },
          "409": {
            "description": "Scan cannot be cancelled (already completed or failed)"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/dast/scans/{scanId}/status": {
      "get": {
        "summary": "Get DAST scan status",
        "description": "Retrieves the current status and progress of a DAST scan",
        "tags": [
          "DAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Scan execution ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Scan status and progress",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING",
                        "QUEUED",
                        "RUNNING",
                        "COMPLETED",
                        "FAILED",
                        "CANCELLED"
                      ]
                    },
                    "progress": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Insufficient permissions"
          },
          "404": {
            "description": "Scan not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/v1/dast/providers": {
      "get": {
        "summary": "Get supported DAST providers",
        "description": "Retrieves list of supported DAST scanning providers",
        "tags": [
          "DAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of supported providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "scanTypes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/projects/{projectId}/sast/scans": {
      "post": {
        "summary": "Launch a SAST scan",
        "description": "Launches a new SAST scan for the specified project. The project must have a repository URL linked.",
        "tags": [
          "SAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the project to scan."
          }
        ],
        "responses": {
          "202": {
            "description": "SAST scan successfully queued.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "SAST scan successfully queued."
                    },
                    "scanExecutionId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "Project not found or repository URL is not configured."
          },
          "500": {
            "description": "An unexpected error occurred."
          }
        }
      },
      "get": {
        "summary": "Get SAST scan history",
        "description": "Retrieves a list of all SAST scan executions for a project.",
        "tags": [
          "SAST Scans"
        ],
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the project."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SAST scan executions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScanExecution"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access denied."
          }
        }
      }
    },
    "/internal/scans/{scanId}/report": {
      "post": {
        "summary": "Report scan results",
        "description": "An internal endpoint for scanner services to report back their results upon completion. This endpoint is protected by a shared secret.",
        "tags": [
          "Internal"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "scanId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the scan execution this report belongs to."
          },
          {
            "in": "header",
            "name": "X-Internal-Secret",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The shared secret to authenticate the internal service."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider": {
                    "type": "string",
                    "example": "Semgrep"
                  },
                  "results": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "description": "An array of finding objects from the scanner."
                  },
                  "error": {
                    "type": "string",
                    "description": "An error message if the scan failed."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Report received successfully."
          },
          "403": {
            "description": "Forbidden. The internal secret was invalid or missing."
          }
        }
      }
    }
  },
  "security": [
    {
      "cookieAuth": []
    }
  ]
}