"use strict";(self.webpackChunk_stagehand_docs=self.webpackChunk_stagehand_docs||[]).push([[376],{1184:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}},4537:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"backend-architecture","title":"Backend Architecture & Conventions","description":"This document provides a detailed guide to the structure, conventions, and patterns used in the packages/api service. It is intended for developers working on the backend to ensure consistency and maintainability.","source":"@site/docs/backend-architecture.md","sourceDirName":".","slug":"/backend-architecture","permalink":"/backend-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/stagehand/tree/main/packages/docs/docs/backend-architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"API Reference","permalink":"/api-reference"},"next":{"title":"Frontend Architecture & Conventions","permalink":"/frontend-architecture"}}');var r=s(4848),t=s(1184);const c={},o="Backend Architecture & Conventions",a={},d=[{value:"Technology Stack",id:"technology-stack",level:2},{value:"Directory Structure",id:"directory-structure",level:2},{value:"Key Concepts &amp; Conventions",id:"key-concepts--conventions",level:2},{value:"1. Configuration",id:"1-configuration",level:3},{value:"2. Routing",id:"2-routing",level:3},{value:"3. Database Interaction",id:"3-database-interaction",level:3},{value:"4. Authentication &amp; Authorization",id:"4-authentication--authorization",level:3},{value:"5. Security",id:"5-security",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"backend-architecture--conventions",children:"Backend Architecture & Conventions"})}),"\n",(0,r.jsxs)(n.p,{children:["This document provides a detailed guide to the structure, conventions, and patterns used in the ",(0,r.jsx)(n.code,{children:"packages/api"})," service. It is intended for developers working on the backend to ensure consistency and maintainability."]}),"\n",(0,r.jsx)(n.h2,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,r.jsx)(n.p,{children:"The backend is a Node.js application built with the following core technologies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Framework:"})," ",(0,r.jsx)(n.a,{href:"https://expressjs.com/",children:"Express.js"})," for routing and middleware."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database:"})," ",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ORM:"})," ",(0,r.jsx)(n.a,{href:"https://www.prisma.io/",children:"Prisma"})," for database access and migrations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication:"})," ",(0,r.jsx)(n.a,{href:"http://www.passportjs.org/",children:"Passport.js"})," for handling authentication strategies, primarily OIDC."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sessions:"})," ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/express-session",children:"express-session"})," with ",(0,r.jsx)(n.a,{href:"https://www.npmjs.com/package/@quixo3/prisma-session-store",children:"PrismaSessionStore"})," for persistent, database-backed sessions."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"packages/api"})," directory is organized as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"packages/api/\n\u251c\u2500\u2500 prisma/\n\u2502   \u251c\u2500\u2500 schema.prisma   # The single source of truth for the database schema.\n\u2502   \u251c\u2500\u2500 migrations/     # Database migration files generated by Prisma.\n\u2502   \u2514\u2500\u2500 seed.js         # Seed script for populating development data.\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 index.js        # Application entry point, middleware setup, and server start.\n    \u251c\u2500\u2500 middleware/     # Custom Express middleware (e.g., auth checks).\n    \u251c\u2500\u2500 routes/         # API route definitions, one file per resource.\n    \u2514\u2500\u2500 utils/          # Helper functions, business logic, and integrations (e.g., crypto, passport).\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts--conventions",children:"Key Concepts & Conventions"}),"\n",(0,r.jsx)(n.h3,{id:"1-configuration",children:"1. Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Environment variables are managed using the ",(0,r.jsx)(n.code,{children:"dotenv"})," package."]}),"\n",(0,r.jsxs)(n.li,{children:["The primary configuration file for local development is ",(0,r.jsx)(n.code,{children:".env"})," in the project root."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.code,{children:".env.example"})," file is provided as a template. ",(0,r.jsxs)(n.strong,{children:["Never commit the ",(0,r.jsx)(n.code,{children:".env"})," file."]})]}),"\n",(0,r.jsxs)(n.li,{children:["Key variables include ",(0,r.jsx)(n.code,{children:"DATABASE_URL"}),", ",(0,r.jsx)(n.code,{children:"SESSION_SECRET"}),", and ",(0,r.jsx)(n.code,{children:"ENCRYPTION_KEY"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-routing",children:"2. Routing"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["API endpoints are organized into separate files within ",(0,r.jsx)(n.code,{children:"src/routes/"})," based on the resource they handle (e.g., ",(0,r.jsx)(n.code,{children:"teams.js"}),", ",(0,r.jsx)(n.code,{children:"projects.js"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Each route file creates an ",(0,r.jsx)(n.code,{children:"express.Router()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["All routes are prefixed with ",(0,r.jsx)(n.code,{children:"/api/v1"})," in the main ",(0,r.jsx)(n.code,{children:"src/index.js"})," file."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"To add a new route:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create or open the appropriate resource file in ",(0,r.jsx)(n.code,{children:"src/routes/"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Define the new endpoint on the router (e.g., ",(0,r.jsx)(n.code,{children:"router.get('/:id', ...)"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Ensure the file is imported and used in ",(0,r.jsx)(n.code,{children:"src/index.js"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-database-interaction",children:"3. Database Interaction"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prisma is the single source of truth."})," All database schema changes ",(0,r.jsx)(n.strong,{children:"must"})," be done in ",(0,r.jsx)(n.code,{children:"prisma/schema.prisma"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["After changing the schema, run ",(0,r.jsx)(n.code,{children:"npx prisma migrate dev --name <migration-name>"})," to create a migration file and apply it to your database."]}),"\n",(0,r.jsxs)(n.li,{children:["A single ",(0,r.jsx)(n.code,{children:"PrismaClient"})," instance is created in ",(0,r.jsx)(n.code,{children:"src/index.js"})," and should be used for all database queries. For simplicity in this project, we are not passing the client instance around but rather creating new instances where needed."]}),"\n",(0,r.jsxs)(n.li,{children:["Example query: ",(0,r.jsx)(n.code,{children:"const user = await prisma.user.findUnique({ where: { id } });"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-authentication--authorization",children:"4. Authentication & Authorization"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication:"})," The API uses a stateful, session-based authentication model.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Upon successful login, a session is created in the ",(0,r.jsx)(n.code,{children:"Session"})," table in the database."]}),"\n",(0,r.jsx)(n.li,{children:"A secure cookie containing the session ID is sent to the client."}),"\n",(0,r.jsxs)(n.li,{children:["On subsequent requests, ",(0,r.jsx)(n.code,{children:"passport.deserializeUser"})," uses the session ID to fetch the user's data, including their roles and memberships."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OIDC:"})," The primary authentication strategy is OpenID Connect (OIDC), implemented in ",(0,r.jsx)(n.code,{children:"src/utils/passport.js"}),". The configuration is dynamic, allowing different organizations to configure their own IdPs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authorization (Permissions):"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Authorization logic should be handled within the route handlers."}),"\n",(0,r.jsxs)(n.li,{children:["The deserialized ",(0,r.jsx)(n.code,{children:"req.user"})," object contains the user's memberships and roles."]}),"\n",(0,r.jsx)(n.li,{children:"Before performing an action, check if the user's role grants them permission to access or modify the requested resource."}),"\n",(0,r.jsxs)(n.li,{children:["Example: Check if ",(0,r.jsx)(n.code,{children:"req.user.memberships"})," includes a role that permits the action on the target ",(0,r.jsx)(n.code,{children:"organizationId"})," or ",(0,r.jsx)(n.code,{children:"companyId"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-security",children:"5. Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sensitive Data:"})," Any sensitive information stored in the database that is not required for querying (e.g., external API keys, secrets) ",(0,r.jsx)(n.strong,{children:"must"})," be encrypted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encryption Utility:"})," Use the ",(0,r.jsx)(n.code,{children:"encrypt"})," and ",(0,r.jsx)(n.code,{children:"decrypt"})," functions from ",(0,r.jsx)(n.code,{children:"src/utils/crypto.js"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encryption Key:"})," This system relies on the ",(0,r.jsx)(n.code,{children:"ENCRYPTION_KEY"})," environment variable. This key must be a 64-character hex string and must be kept secret. Losing or changing this key will result in data loss."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);