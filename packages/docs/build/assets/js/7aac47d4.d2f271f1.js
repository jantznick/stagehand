"use strict";(self.webpackChunk_stagehand_docs=self.webpackChunk_stagehand_docs||[]).push([[932],{1184:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var i=s(6540);const r={},o=i.createContext(r);function c(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(o.Provider,{value:n},e.children)}},9980:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/company","title":"API Reference: Companies","description":"This document provides a detailed breakdown of the company-related API endpoints.","source":"@site/docs/api/company.md","sourceDirName":"api","slug":"/api/company","permalink":"/api/company","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/stagehand/tree/main/packages/docs/docs/api/company.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"API Reference: Organizations","permalink":"/api/organizations"},"next":{"title":"API Reference: Teams","permalink":"/api/teams"}}');var r=s(4848),o=s(1184);const c={},d="API Reference: Companies",t={},l=[{value:"Overview",id:"overview",level:2},{value:"Permissions Helpers",id:"permissions-helpers",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"<code>GET /</code>",id:"get-",level:3},{value:"<code>GET /:id</code>",id:"get-id",level:3},{value:"<code>POST /</code>",id:"post-",level:3},{value:"<code>PUT /:id</code>",id:"put-id",level:3},{value:"<code>DELETE /:id</code>",id:"delete-id",level:3},{value:"Endpoints (Auto-Join Domains)",id:"endpoints-auto-join-domains",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-reference-companies",children:"API Reference: Companies"})}),"\n",(0,r.jsx)(n.p,{children:"This document provides a detailed breakdown of the company-related API endpoints."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File:"})," ",(0,r.jsx)(n.code,{children:"packages/api/src/routes/company.js"}),"\n",(0,r.jsx)(n.strong,{children:"Base Path:"})," ",(0,r.jsx)(n.code,{children:"/api/v1/companies"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Manages companies, which are the primary tenants within an organization. In an enterprise account, an organization can have multiple companies. For standard accounts, a single company typically exists by default. These routes handle the full CRUD lifecycle for companies and company-specific auto-join domain rules."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Middleware:"})," All routes in this file are protected by the ",(0,r.jsx)(n.code,{children:"protect"})," middleware."]}),"\n",(0,r.jsx)(n.h2,{id:"permissions-helpers",children:"Permissions Helpers"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hasPermission(user, requiredRoles, entityType, entityId)"}),": Checks if the user has the required role on a specific entity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"getVisibleResourceIds(user, entityType)"}),": A utility from ",(0,r.jsx)(n.code,{children:"src/utils/permissions.js"})," that traverses the user's memberships to return an array of all IDs for a given ",(0,r.jsx)(n.code,{children:"entityType"})," (e.g., 'company') that the user has at least ",(0,r.jsx)(n.code,{children:"READER"})," access to. This is essential for building list views that respect user permissions."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,r.jsx)(n.h3,{id:"get-",children:(0,r.jsx)(n.code,{children:"GET /"})}),"\n",(0,r.jsx)(n.p,{children:"Retrieves a list of all companies the current user has access to."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Implicitly handled by the helper function."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"200"}),"):"]})," An array of company objects."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Behavior:"})," Uses the ",(0,r.jsx)(n.code,{children:"getVisibleResourceIds"})," helper to find all companies the user is a member of (either directly or by being a member of the parent organization) and returns them."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"get-id",children:(0,r.jsx)(n.code,{children:"GET /:id"})}),"\n",(0,r.jsx)(n.p,{children:"Retrieves a single company by its ID."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Requires ",(0,r.jsx)(n.code,{children:"READER"}),", ",(0,r.jsx)(n.code,{children:"EDITOR"}),", or ",(0,r.jsx)(n.code,{children:"ADMIN"})," role on the company."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"200"}),"):"]})," The full company object."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"post-",children:(0,r.jsx)(n.code,{children:"POST /"})}),"\n",(0,r.jsx)(n.p,{children:"Creates a new company within an organization."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Requires ",(0,r.jsx)(n.code,{children:"ADMIN"})," role on the parent ",(0,r.jsx)(n.code,{children:"organizationId"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Body (",(0,r.jsx)(n.code,{children:"application/json"}),"):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (string, required): The name of the new company."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (string, optional): A description for the company."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"organizationId"})," (string, required): The ID of the organization this company will belong to."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"201"}),"):"]})," The newly created company object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Behavior:"})," Creates the new company record linked to the specified organization."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"put-id",children:(0,r.jsx)(n.code,{children:"PUT /:id"})}),"\n",(0,r.jsx)(n.p,{children:"Updates a company's details."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Requires ",(0,r.jsx)(n.code,{children:"ADMIN"})," role on the company."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Body (",(0,r.jsx)(n.code,{children:"application/json"}),"):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (string, optional): The new name."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"description"})," (string, optional): The new description."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"200"}),"):"]})," The updated company object."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Behavior:"})," Updates the ",(0,r.jsx)(n.code,{children:"name"})," and/or ",(0,r.jsx)(n.code,{children:"description"})," for the specified company."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"delete-id",children:(0,r.jsx)(n.code,{children:"DELETE /:id"})}),"\n",(0,r.jsx)(n.p,{children:"Deletes a company."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions:"})," Requires ",(0,r.jsx)(n.code,{children:"ADMIN"})," role on the company."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Success Response (",(0,r.jsx)(n.code,{children:"204"}),"):"]})," No content."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Behavior:"})," Deletes the company record. Note: This may fail if there are database constraints (e.g., existing teams or projects that belong to the company) that prevent deletion."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"endpoints-auto-join-domains",children:"Endpoints (Auto-Join Domains)"}),"\n",(0,r.jsx)(n.p,{children:"These endpoints function identically to the organization-level auto-join routes but are scoped to a specific company, allowing for more granular control in multi-company setups."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET /:id/domains"}),": Gets all auto-join domains for the company. (Requires membership in the hierarchy)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /:id/domains"}),": Adds a new auto-join domain for the company. (Requires Company ",(0,r.jsx)(n.code,{children:"ADMIN"})," role)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /:id/domains/:domainMappingId/verify"}),": Verifies a domain for the company via DNS. (Requires Company ",(0,r.jsx)(n.code,{children:"ADMIN"})," role)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DELETE /:id/domains/:domainMappingId"}),": Deletes a domain configuration for the company. (Requires Company ",(0,r.jsx)(n.code,{children:"ADMIN"})," role)."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);