datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x"]
}

enum VerificationStatus {
  PENDING
  VERIFIED
}

enum DeploymentStatus {
  PLANNING
  IN_DEVELOPMENT
  TESTING
  RELEASED
  MAINTENANCE
  DISCONTINUED
}

enum TechnologyType {
  LANGUAGE
  FRAMEWORK
  LIBRARY
  TOOL
  PLATFORM
  SERVICE
}

enum ProjectType {
  SERVICE
  LIBRARY
  FRONTEND_APP
  BACKEND_APP
  MOBILE_APP
  OWNED_HARDWARE
  CLOUD_HARDWARE
  EXTERNAL_BOUGHT_SOFTWARE
  CLI_TOOL
  OTHER
}

enum DataClassification {
  PUBLIC
  INTERNAL
  SENSITIVE
  RESTRICTED
}

enum ApplicationCriticality {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SCMProvider {
  GITHUB
  BITBUCKET
  AZURE_DEVOPS
}

enum SecurityToolType {
  SAST
  DAST
  SCA
  APISEC
}

enum DastScanType {
  ACTIVE
  PASSIVE
  BASELINE
  FULL
  CUSTOM
}

enum ScanStatus {
  PENDING
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  IMPORTED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailVerified              Boolean   @default(false)
  verificationToken          String?
  verificationTokenExpiresAt DateTime?

  memberships        Membership[]
  invitation         Invitation?
  passwordResetToken PasswordResetToken?
  loginTokens        LoginToken[]
  teamMemberships    TeamMember[]

  contacts                 Contact[]
  scmIntegrations          SCMIntegration[]
  securityToolIntegrations SecurityToolIntegration[]
  initiatedScans           ScanExecution[]
}

model Session {
  id                       String                    @id @default(cuid())
  sid                      String                    @unique
  data                     String
  expiresAt                DateTime
  autoJoinDomains          AutoJoinDomain[]
  oidcConfiguration        OIDCConfiguration?        @relation(fields: [oIDCConfigurationId], references: [id])
  integrations             SCMIntegration[]
  securityToolIntegrations SecurityToolIntegration[]
  oIDCConfigurationId      String?
}

model Organization {
  id                    String   @id @default(cuid())
  name                  String
  description           String?
  accountType           String   @default("STANDARD")
  hierarchyDisplayNames Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  defaultCompanyId      String?

  companies                Company[]
  memberships              Membership[]
  autoJoinDomains          AutoJoinDomain[]
  oidcConfiguration        OIDCConfiguration?
  integrations             SCMIntegration[]
  securityToolIntegrations SecurityToolIntegration[]
  roles                    Role[]
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teams                    Team[]
  memberships              Membership[]
  autoJoinDomains          AutoJoinDomain[]
  integrations             SCMIntegration[]
  securityToolIntegrations SecurityToolIntegration[]
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  projects                 Project[]
  memberships              Membership[]
  members                  TeamMember[]
  integrations             SCMIntegration[]
  securityToolIntegrations SecurityToolIntegration[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  memberships Membership[]

  applicationUrl   String?
  version          String?
  deploymentStatus DeploymentStatus @default(IN_DEVELOPMENT)

  dastScanEnabled  Boolean? @default(false)
  lastDastScanDate DateTime?
  dastScanSettings Json?

  repositoryUrl   String?
  ciCdPipelineUrl String?

  lastScanDate DateTime?

  projectType            ProjectType?
  dataClassification     DataClassification?
  applicationCriticality ApplicationCriticality?
  isExternallyExposed    Boolean?                @default(false)

  communicationChannel String?
  documentationUrl     String?
  apiReferenceUrl      String?
  runbookUrl           String?
  threatModelUrl       String?
  lastSecurityReview   DateTime?

  contacts     ProjectContact[]
  technologies ProjectTechnology[]
  dependencies ProjectDependency[]

  outboundDependencies           ProjectRelationship[]     @relation("outboundDependencies")
  inboundDependencies            ProjectRelationship[]     @relation("inboundDependencies")
  integrations                   SCMIntegration[]          @relation("DirectProjectIntegrations")
  directSecurityToolIntegrations SecurityToolIntegration[] @relation("DirectProjectSecurityToolIntegrations")

  scmIntegrationId String?
  scmIntegration   SCMIntegration? @relation("ProjectRepositoryLink", fields: [scmIntegrationId], references: [id], onDelete: SetNull)

  securityToolIntegrationId String?
  securityToolIntegration   SecurityToolIntegration? @relation("ProjectSecurityToolLink", fields: [securityToolIntegrationId], references: [id], onDelete: SetNull)

  toolSpecificIds Json? @default("{}")

  findings       Finding[]
  scanExecutions ScanExecution[]
}

model ProjectRelationship {
  id          String  @id @default(cuid())
  description String?
  type        String

  sourceProjectId String
  sourceProject   Project @relation("outboundDependencies", fields: [sourceProjectId], references: [id], onDelete: Cascade)

  targetProjectId String
  targetProject   Project @relation("inboundDependencies", fields: [targetProjectId], references: [id], onDelete: Cascade)

  @@unique([sourceProjectId, targetProjectId, type])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  usedAt    DateTime?
  updatedAt DateTime  @updatedAt
}

model Membership {
  id             String        @id @default(cuid())
  roleId         String
  role           Role          @relation(fields: [roleId], references: [id])
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId         String?
  team           Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  companyId      String?
  company        Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())

  @@unique([userId, organizationId])
  @@unique([userId, companyId])
  @@unique([userId, projectId])
  @@unique([teamId, organizationId])
  @@unique([teamId, companyId])
  @@unique([teamId, projectId])
}

model Role {
  id             String       @id @default(cuid())
  name           String
  description    String?
  isEditable     Boolean      @default(true)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  permissions    Permission[]
  memberships    Membership[]
}

model Permission {
  id           String @id @default(cuid())
  action       String
  resourceType String
  description  String?
  roles        Role[]

  @@unique([action, resourceType])
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
}

model Contact {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  role  String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  applications ProjectContact[]
}

model ProjectContact {
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  contactId String
  contact   Contact @relation(fields: [contactId], references: [id])

  contactType String

  @@id([projectId, contactId, contactType])
}

model Technology {
  id   String         @id @default(cuid())
  name String
  type TechnologyType

  applications ProjectTechnology[]
  dependencies ProjectDependency[]

  @@unique([name, type])
}

model ProjectTechnology {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  technologyId String
  technology   Technology @relation(fields: [technologyId], references: [id])

  version String?
  source  String

  @@unique([projectId, technologyId, version])
}

model ProjectDependency {
  id      String @id @default(cuid())
  name    String
  version String
  type    String

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  technologyId String?
  technology   Technology? @relation(fields: [technologyId], references: [id])

  @@unique([projectId, name, version])
  @@index([name])
  @@index([name, version])
}

model AutoJoinDomain {
  id               String             @id @default(cuid())
  domain           String
  roleId           String?
  status           VerificationStatus @default(PENDING)
  verificationCode String             @unique

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  Session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?

  @@unique([domain, organizationId])
  @@unique([domain, companyId])
}

model OIDCConfiguration {
  id               String  @id @default(cuid())
  organizationId   String  @unique
  isEnabled        Boolean @default(false)
  issuer           String  @unique
  clientId         String
  clientSecret     String
  authorizationUrl String
  tokenUrl         String
  userInfoUrl      String
  defaultRoleId    String?
  buttonText       String?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Session   Session[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  selector  String   @unique
  token     String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model LoginToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  usedAt    DateTime?
}

model SCMIntegration {
  id          String      @id @default(cuid())
  provider    SCMProvider
  displayName String?

  installationId        String?
  encryptedAccessToken  String
  encryptedRefreshToken String?

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  projectId String?
  project   Project? @relation("DirectProjectIntegrations", fields: [projectId], references: [id], onDelete: Cascade)

  projectLinks Project[] @relation("ProjectRepositoryLink")

  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  syncLogs  IntegrationSyncLog[]
  Session   Session?             @relation(fields: [sessionId], references: [id])
  sessionId String?
}

model SecurityToolIntegration {
  id        String           @id @default(cuid())
  provider  String
  type      SecurityToolType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  encryptedCredentials Json

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  companyId      String?
  company        Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  teamId         String?
  team           Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  directProjectLinks Project[] @relation("DirectProjectSecurityToolIntegrations")
  linkedProjects     Project[] @relation("ProjectSecurityToolLink")

  syncLogs       IntegrationSyncLog[]
  scanExecutions ScanExecution[]
  Session        Session?             @relation(fields: [sessionId], references: [id])
  sessionId      String?
}

model IntegrationSyncLog {
  id              String    @id @default(cuid())
  status          String
  startTime       DateTime
  endTime         DateTime?
  errorMessage    String?   @db.Text
  findingsAdded   Int       @default(0)
  findingsUpdated Int       @default(0)
  syncedProjectsJson Json?
  scmIntegrationId          String?
  scmIntegration            SCMIntegration?          @relation(fields: [scmIntegrationId], references: [id], onDelete: Cascade)
  securityToolIntegrationId String?
  securityToolIntegration   SecurityToolIntegration? @relation(fields: [securityToolIntegrationId], references: [id], onDelete: Cascade)

  scanExecutions ScanExecution[]

  @@index([scmIntegrationId])
  @@index([securityToolIntegrationId])
}

enum FindingStatus {
  NEW
  TRIAGED
  IN_PROGRESS
  RESOLVED
  IGNORED
}

model Vulnerability {
  id              String              @id @default(cuid())
  vulnerabilityId String
  source          String
  type            SecurityToolType?

  title       String
  description String  @db.Text
  severity    String
  cvssScore   Float?
  remediation String? @db.Text
  references  Json?

  findings Finding[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([vulnerabilityId, source])
}

model Finding {
  id     String        @id @default(cuid())
  status FindingStatus @default(NEW)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  vulnerabilityId String
  source          String
  vulnerability   Vulnerability @relation(fields: [vulnerabilityId, source], references: [vulnerabilityId, source])

  url String?

  metadata Json?

  firstSeenAt DateTime  @default(now())
  lastSeenAt  DateTime  @updatedAt
  resolvedAt  DateTime?

  @@unique([projectId, vulnerabilityId, source])
  @@index([projectId])
  @@index([url])
}

model ScanExecution {
  id        String      @id @default(cuid())
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  provider    String
  toolVersion String?

  targetUrl String
  scanType  DastScanType @default(ACTIVE)
  status    ScanStatus

  queuedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  duration    Int?

  errorMessage String? @db.Text
  errorCode    String?

  findingsCount Int @default(0)
  criticalCount Int @default(0)
  highCount     Int @default(0)
  mediumCount   Int @default(0)
  lowCount      Int @default(0)
  infoCount     Int @default(0)

  toolConfig   Json?
  toolMetadata Json?

  externalScanId    String?
  externalReportUrl String?
  isExternalScan    Boolean  @default(false)

  securityToolIntegrationId String?
  securityToolIntegration   SecurityToolIntegration? @relation(fields: [securityToolIntegrationId], references: [id])
  syncLogId                 String?
  syncLog                   IntegrationSyncLog?      @relation(fields: [syncLogId], references: [id])

  initiatedById String?
  initiatedBy   User?   @relation(fields: [initiatedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([status])
  @@index([provider])
  @@index([targetUrl])
}
